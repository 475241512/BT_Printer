<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PRT486.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PRT486.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Thu Oct 29 16:13:08 2015
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; esc_p &rArr; GetChineseFont &rArr; DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[19]">BOD_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[c]">CAN_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1a]">FMC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[e]">I2C_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1e]">PIOINT0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1d]">PIOINT1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1c]">PIOINT2_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1b]">PIOINT3_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[13]">SSP0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[d]">SSP1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_lpc11xx.o(.text) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[f]">TIMER16_0_IRQHandler</a> from timer16.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[10]">TIMER16_1_IRQHandler</a> from timer16.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[11]">TIMER32_0_IRQHandler</a> from paperdetect.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[12]">TIMER32_1_IRQHandler</a> from tp.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[14]">UART_IRQHandler</a> from uart.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[16]">USB_FIQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[15]">USB_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[b]">WAKEUP_IRQHandler</a> from startup_lpc11xx.o(.text) referenced 13 times from startup_lpc11xx.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[23]">__main</a> from __main.o(!!!main) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[22]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[21]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cc]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[28]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[29]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[30]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[da]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[db]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[de]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[df]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[f4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[31]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; esc_p &rArr; GetChineseFont &rArr; DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d5]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[34]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[36]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSetSpeed
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[7e]"></a>event_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>event_post</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperSNSDetect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPBMSNSDetect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
</UL>

<P><STRONG><a name="[39]"></a>event_pend</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>

<P><STRONG><a name="[38]"></a>event_proc</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wake_up
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterReady
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintTestPage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putchar
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_pend
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getchar
</UL>

<P><STRONG><a name="[f9]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USB_FIQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSelfTest2
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>

<P><STRONG><a name="[fd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[100]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[101]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>config_init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, config-param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = config_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ReadJedecId
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ReadId
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>config_idx2baud</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, config-param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = config_idx2baud &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintTestPage
</UL>

<P><STRONG><a name="[46]"></a>EraseConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, config-param.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_SectorErase
</UL>

<P><STRONG><a name="[48]"></a>UpdateParaSector</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, config-param.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_SectorErase
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_AAIWordProgram
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F16_PageProgram
</UL>

<P><STRONG><a name="[4b]"></a>DotBufFillToPrn</STRONG> (Thumb, 472 bytes, Stack size 96 bytes, dotfill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintLine
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictureDotFillToBuf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufFillToPrn_0
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufFillToPrn
</UL>

<P><STRONG><a name="[4e]"></a>BufFillToPrn</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dotfill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedLine
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotBufFillToPrn
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrentBuffer
</UL>

<P><STRONG><a name="[50]"></a>BufFillToPrn_0</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dotfill.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedLine
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotBufFillToPrn
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrentBuffer_0
</UL>

<P><STRONG><a name="[51]"></a>PrintCurrentBuffer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dotfill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufFillToPrn
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>

<P><STRONG><a name="[53]"></a>PrintCurrentBuffer_0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dotfill.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufFillToPrn_0
</UL>

<P><STRONG><a name="[54]"></a>DotFillToBuf</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, dotfill.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontUnderline
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontEnlarge
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrentBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishHRIFont
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[58]"></a>PictureDotFillToBuf</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, dotfill.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotBufFillToPrn
</UL>

<P><STRONG><a name="[59]"></a>esc_p_init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, esc_p.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = esc_p_init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_init
</UL>

<P><STRONG><a name="[5a]"></a>esc_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, esc_p.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = esc_init &rArr; esc_p_init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>esc_p</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, esc_p.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = esc_p &rArr; GetChineseFont &rArr; DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getchar
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrentBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>F25L_StatusRegisterRead</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftInByte
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutByte
</UL>

<P><STRONG><a name="[7d]"></a>F25L_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>F25L_ReadJedecId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[42]"></a>F25L_ReadId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[44]"></a>F25L_Read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>

<P><STRONG><a name="[102]"></a>F25L_FastRead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>F25L_ByteProgram</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>F25L_AAIWordProgram</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParaSector
</UL>

<P><STRONG><a name="[4a]"></a>F16_PageProgram</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParaSector
</UL>

<P><STRONG><a name="[47]"></a>F25L_SectorErase</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParaSector
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseConfig
</UL>

<P><STRONG><a name="[104]"></a>F25L_ChipErase</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>FontEnlarge</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FontEnlarge &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>

<P><STRONG><a name="[57]"></a>FontUnderline</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FontUnderline
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>

<P><STRONG><a name="[6d]"></a>FontCircumvolve</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FontCircumvolve
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[5d]"></a>GetEnglishFont</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = GetEnglishFont &rArr; DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontCircumvolve
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontRevert
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontSmoothing
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontBold
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p
</UL>

<P><STRONG><a name="[5e]"></a>GetChineseFont</STRONG> (Thumb, 288 bytes, Stack size 96 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = GetChineseFont &rArr; DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontCircumvolve
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontRevert
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontSmoothing
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontBold
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p
</UL>

<P><STRONG><a name="[6f]"></a>GetEnglishHRIFont</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>

<P><STRONG><a name="[81]"></a>GPIOSetValue</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufGetchar
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getchar
</UL>

<P><STRONG><a name="[74]"></a>GPIOSetDir</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanInit
</UL>

<P><STRONG><a name="[71]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
</UL>

<P><STRONG><a name="[70]"></a>KeyScanProc</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, keyscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeyScanProc &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_post
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>KeyScanInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyscan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KeyScanInit &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>LedInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LedInit &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>LedScanProc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedScanProc
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperReady
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterReady
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>Delay1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
</UL>

<P><STRONG><a name="[78]"></a>Delayms</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delayms
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = main &rArr; esc_p &rArr; GetChineseFont &rArr; DotFillToBuf &rArr; PrintCurrentBuffer &rArr; BufFillToPrn &rArr; DotBufFillToPrn &rArr; TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperSNSInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPInit
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDesity
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_INIT
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaperStartSns
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_idx2baud
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7b]"></a>TPPaperSNSInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TPPaperSNSInit &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>PaperStartSns</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PaperStartSns
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>TPBMSNSDetect</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPBMSNSDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_post
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>TPPaperSNSDetect</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPPaperSNSDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_post
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>TPPrinterMark</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, paperdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPForwardStep
</UL>

<P><STRONG><a name="[3b]"></a>TPPrinterReady</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, paperdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPCheckBuf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedStep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedScanProc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>

<P><STRONG><a name="[77]"></a>TPPaperReady</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, paperdetect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedScanProc
</UL>

<P><STRONG><a name="[11]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER32_0_IRQHandler &rArr; KeyScanProc &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperSNSDetect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPBMSNSDetect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerADFilter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedScanProc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SSP_INIT</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>SSP0_SendData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUpTP_MODE1
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataShiftOut
</UL>

<P><STRONG><a name="[8b]"></a>Main_PLL_Setup</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, system_lpc11xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_PLL_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>SysTICs_INIT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_lpc11xx.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>getSysTICs</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_lpc11xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedSysTICs
</UL>

<P><STRONG><a name="[8c]"></a>getElapsedSysTICs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, system_lpc11xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSysTICs
</UL>

<P><STRONG><a name="[8e]"></a>TranVtoR</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, thermaldetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TranVtoR
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHTemperature
</UL>

<P><STRONG><a name="[8f]"></a>TranRtoDegree</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, thermaldetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHTemperature
</UL>

<P><STRONG><a name="[90]"></a>TPHTemperature</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, thermaldetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TPHTemperature &rArr; TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranRtoDegree
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranVtoR
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAdjustStepTime
</UL>

<P><STRONG><a name="[91]"></a>delayMs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, timer16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[f]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, timer16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, timer16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>enable_timer16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer16.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>disable_timer16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer16.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer16PWM
</UL>

<P><STRONG><a name="[107]"></a>reset_timer16</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer16.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>init_timer16</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, timer16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[94]"></a>init_timer16PWM</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, timer16.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer16
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[108]"></a>setMatch_timer16PWM</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, timer16.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>enable_timer32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPReStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPStart
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PaperStartSns
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wake_up
</UL>

<P><STRONG><a name="[85]"></a>disable_timer32</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperSNSInit
</UL>

<P><STRONG><a name="[ae]"></a>reset_timer32</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPReStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wake_up
</UL>

<P><STRONG><a name="[84]"></a>init_timer32</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperSNSInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPInit
</UL>

<P><STRONG><a name="[99]"></a>WakeUpTP_MODE1</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WakeUpTP_MODE1 &rArr; TPIntSetIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufToZero
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPIntSetIdle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>MaxHeatDotsAdj</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MaxHeatDotsAdj &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataShiftCntProc
</UL>

<P><STRONG><a name="[ad]"></a>TPISRProc</STRONG> (Thumb, 922 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TPISRProc &rArr; TPCheckBuf &rArr; TPDataShiftCntProc &rArr; TPAdjustStepTime &rArr; TPHTemperature &rArr; TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPCheckBuf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataDMAShiftToPrn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedStep
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSetTimeCnt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPGetStepTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPForwardStep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPIntSetIdle
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterMark
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_1_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TIMER32_1_IRQHandler &rArr; TPISRProc &rArr; TPCheckBuf &rArr; TPDataShiftCntProc &rArr; TPAdjustStepTime &rArr; TPHTemperature &rArr; TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>TPSetSpeed</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TPSetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDesity
</UL>

<P><STRONG><a name="[7a]"></a>TPInit</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TPInit &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>SetDesity</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetDesity &rArr; TPSetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>Wake_up</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wake_up
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>

<P><STRONG><a name="[b3]"></a>TPReStart</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>

<P><STRONG><a name="[4d]"></a>TPPrintLine</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TPPrintLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSelfTest2
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotBufFillToPrn
</UL>

<P><STRONG><a name="[4f]"></a>TPFeedLine</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TPFeedLine &rArr; TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedStart
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufFillToPrn_0
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufFillToPrn
</UL>

<P><STRONG><a name="[b5]"></a>TPFeedToMark</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedToMarkStart
</UL>

<P><STRONG><a name="[109]"></a>TPCheckBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tp.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>TPFeedStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedLine
</UL>

<P><STRONG><a name="[b7]"></a>TPFeedToMarkStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedToMark
</UL>

<P><STRONG><a name="[10a]"></a>TPFeedStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tp.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>IsPrintBufEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tp.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>IsPrinterIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tp.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>TPPrintTestPage</STRONG> (Thumb, 618 bytes, Stack size 88 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufToZero
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufPushBytes
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintAsciiLine
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_idx2baud
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>

<P><STRONG><a name="[bc]"></a>TPSelfTest2</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, tp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintLine
</UL>

<P><STRONG><a name="[bd]"></a>UartGetRxBufSize</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufGetchar
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getchar
</UL>

<P><STRONG><a name="[14]"></a>UART_IRQHandler</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_IRQHandler &rArr; WakeUpTP_MODE1 &rArr; TPIntSetIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetRxBufSize
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUpTP_MODE1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterReady
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>UARTInit</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UARTInit &rArr; GPIOSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetDir
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>UARTSend</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putchar
</UL>

<P><STRONG><a name="[3e]"></a>Putchar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTSend
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>

<P><STRONG><a name="[5c]"></a>Getchar</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Getchar &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetRxBufSize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p
</UL>

<P><STRONG><a name="[c0]"></a>PrintBufGetchar</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetRxBufSize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOSetValue
</UL>

<P><STRONG><a name="[bb]"></a>PrintBufPushBytes</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufPushLine
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintTestPage
</UL>

<P><STRONG><a name="[b9]"></a>PrintBufPushLine</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PrintBufPushLine
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufPushBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintAsciiLine
</UL>

<P><STRONG><a name="[9a]"></a>PrintBufToZero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUpTP_MODE1
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintTestPage
</UL>

<P><STRONG><a name="[ba]"></a>__2snprintf</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintTestPage
</UL>

<P><STRONG><a name="[c4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[c5]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[c3]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2a]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[ca]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishHRIFont
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontEnlarge
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictureDotFillToBuf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotFillToBuf
</UL>

<P><STRONG><a name="[10d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[40]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUpTP_MODE1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataShiftCntProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esc_p_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontEnlarge
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PictureDotFillToBuf
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrentBuffer_0
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCurrentBuffer
</UL>

<P><STRONG><a name="[10e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSelfTest2
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DotBufFillToPrn
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHeatDotsAdj
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHeatThermalAdj
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranRtoDegree
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TranVtoR
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerADFilter
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxHeatDotsAdj
</UL>

<P><STRONG><a name="[c9]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[21]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[2c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c8]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2e]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[33]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config-param.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPForwardStep
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_idx2baud
</UL>

<P><STRONG><a name="[cb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>F25L_ShiftOutByte</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_StatusRegisterRead
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_StatusRegisterWrite
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_StatusRegisterWriteEnable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_WriteDisable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_WriteEnable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutAddrWrite
</UL>

<P><STRONG><a name="[62]"></a>F25L_ShiftInByte</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_StatusRegisterRead
</UL>

<P><STRONG><a name="[5f]"></a>F25L_ShiftOutAddrWrite</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutByte
</UL>

<P><STRONG><a name="[63]"></a>F25L_WriteEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutByte
</UL>

<P><STRONG><a name="[64]"></a>F25L_WriteDisable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutByte
</UL>

<P><STRONG><a name="[65]"></a>F25L_StatusRegisterWriteEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_StatusRegisterWrite
</UL>

<P><STRONG><a name="[66]"></a>F25L_StatusRegisterWrite</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, f25l016a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_StatusRegisterWriteEnable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F25L_ShiftOutByte
</UL>

<P><STRONG><a name="[67]"></a>ByteSwap</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ByteSwap
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[6b]"></a>FontBold</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FontBold
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[6c]"></a>FontSmoothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, font.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[6a]"></a>FontRevertProc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FontRevertProc
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontRevert
</UL>

<P><STRONG><a name="[69]"></a>FontRevert</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FontRevert &rArr; FontRevertProc
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FontRevertProc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnglishFont
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[6e]"></a>gt</STRONG> (Thumb, 282 bytes, Stack size 20 bytes, font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gt
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChineseFont
</UL>

<P><STRONG><a name="[89]"></a>PowerADFilter</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerADFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER32_0_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, paperdetect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPaperSNSInit
</UL>

<P><STRONG><a name="[93]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer16.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer16PWM
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer16
</UL>

<P><STRONG><a name="[96]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
</UL>

<P><STRONG><a name="[97]"></a>TPIntSetIdle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPIntSetIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUpTP_MODE1
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPCheckBuf
</UL>

<P><STRONG><a name="[9c]"></a>TPForwardStep</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TPForwardStep &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterMark
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedStep
</UL>

<P><STRONG><a name="[a1]"></a>TPHeatVoltageAdj</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAdjustStepTime
</UL>

<P><STRONG><a name="[9e]"></a>TPHeatThermalAdj</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TPHeatThermalAdj
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAdjustStepTime
</UL>

<P><STRONG><a name="[a2]"></a>TPHeatPreLineAdj</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAdjustStepTime
</UL>

<P><STRONG><a name="[9f]"></a>TPHeatDotsAdj</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TPHeatDotsAdj
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAdjustStepTime
</UL>

<P><STRONG><a name="[a0]"></a>TPAdjustStepTime</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TPAdjustStepTime &rArr; TPHTemperature &rArr; TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHeatDotsAdj
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHeatPreLineAdj
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHeatThermalAdj
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHeatVoltageAdj
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPHTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataShiftCntProc
</UL>

<P><STRONG><a name="[a4]"></a>TPGetStepTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedStep
</UL>

<P><STRONG><a name="[a5]"></a>TPSetTimeCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedStep
</UL>

<P><STRONG><a name="[a3]"></a>TPFeedStep</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TPFeedStep &rArr; TPForwardStep &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPSetTimeCnt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPGetStepTime
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPForwardStep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterReady
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
</UL>

<P><STRONG><a name="[ac]"></a>TPIntSetPreIdle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPCheckBuf
</UL>

<P><STRONG><a name="[a8]"></a>TPDataShiftCntProc</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TPDataShiftCntProc &rArr; TPAdjustStepTime &rArr; TPHTemperature &rArr; TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxHeatDotsAdj
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPAdjustStepTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPCheckBuf
</UL>

<P><STRONG><a name="[a9]"></a>TPDataShiftOut</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TPDataShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataDMAShiftToPrn
</UL>

<P><STRONG><a name="[aa]"></a>TPDataDMAShiftToPrn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TPDataDMAShiftToPrn &rArr; TPDataShiftOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataShiftOut
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPCheckBuf
</UL>

<P><STRONG><a name="[ab]"></a>TPCheckBuf</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TPCheckBuf &rArr; TPDataShiftCntProc &rArr; TPAdjustStepTime &rArr; TPHTemperature &rArr; TranRtoDegree
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataDMAShiftToPrn
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDataShiftCntProc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPIntSetPreIdle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPIntSetIdle
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterReady
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPISRProc
</UL>

<P><STRONG><a name="[b2]"></a>TPStart</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TPStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintCmdToBuf
</UL>

<P><STRONG><a name="[b4]"></a>TPPrintCmdToBuf</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = TPPrintCmdToBuf &rArr; event_proc &rArr; TPPrintTestPage &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPStart
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrinterReady
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedToMark
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintLine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPFeedLine
</UL>

<P><STRONG><a name="[b8]"></a>TPPrintAsciiLine</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TPPrintAsciiLine &rArr; PrintBufPushLine
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBufPushLine
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPPrintTestPage
</UL>

<P><STRONG><a name="[b1]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPReStart
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPStart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wake_up
</UL>

<P><STRONG><a name="[98]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPIntSetIdle
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPInit
</UL>

<P><STRONG><a name="[b0]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPInit
</UL>

<P><STRONG><a name="[be]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>

<P><STRONG><a name="[22]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[d4]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d0]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[c6]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
